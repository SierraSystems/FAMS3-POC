---
kind: Template
apiVersion: v1
metadata:
  name: fams3-searchapi-build
  annotations:
    openshift.io/display-name: "FAMS3 SearchAPI Build"
    description: The FAMS3 Search API
    tags: quickstart,dotnet,.net
    iconClass: icon-dotnet
    template.openshift.io/provider-display-name: BCGov
    template.openshift.io/documentation-url: https://github.com/bcgov/FAMS3/
parameters:
- name: NAME
  displayName: Name
  description: The name assigned to all of the frontend objects defined in this template.
  required: true
  value: search-api
- name: MEMORY_LIMIT
  displayName: Memory Limit
  description: Maximum amount of memory the container can use.
  required: true
  value: 128Mi
- name: DOTNET_RUNTIME_IMAGE_STREAM_TAG
  displayName: ".NET Runtime Imagestream Tag"
  description: The image stream tag which is used to run the application.
  required: true
  value: dotnet-runtime:3.0
- name: DOTNET_BUILD_IMAGE_STREAM_TAG
  displayName: ".NET builder"
  required: true
  description: The image stream tag which is used to build the application.
  value: dotnet:3.0
- name: NAMESPACE
  displayName: Namespace
  description: The OpenShift Namespace where the ImageStream resides.
  required: true
  value: openshift
- name: SOURCE_REPOSITORY_URL
  displayName: Git Repository URL
  description: The URL of the repository with your application source code.
  required: true
  value: https://github.com/redhat-developer/s2i-dotnetcore-ex.git
- name: SOURCE_REPOSITORY_REF
  displayName: Git Reference
  description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  value: dotnetcore-3.0
- name: CONTEXT_DIR
  displayName: Context Directory
  description: Set this to use a subdirectory of the source code repository
- name: GITHUB_WEBHOOK_SECRET
  displayName: GitHub Webhook Secret
  description: A secret string used to configure the GitHub webhook.
  generate: expression
  from: "[a-zA-Z0-9]{40}"
- name: GENERIC_WEBHOOK_SECRET
  displayName: Generic Webhook Secret
  description: A secret string used to configure the Generic webhook.
  generate: expression
  from: "[a-zA-Z0-9]{40}"
- name: DOTNET_STARTUP_PROJECT
  displayName: Startup Project
  description: Set this to a project file (e.g. csproj) or a folder containing a single
    project file.
  value: app
- name: DOTNET_PUBLISH_READYTORUN
  displayName: Ahead-of-time compilation
  description: Set this to 'true' to perform an ahead-of-time compilation.
- name: DOTNET_ASSEMBLY_NAME
  displayName: Startup Assembly
  description: Set this when the assembly name is overridden in the project file.
- name: DOTNET_TOOLS
  displayName: ".NET Tools"
  description: Set this to a space separated list of .NET tools needed to publish.
- name: DOTNET_NPM_TOOLS
  displayName: Npm Tools
  description: Set this to a space separated list of npm tools needed to publish.
- name: DOTNET_TEST_PROJECTS
  displayName: Test projects
  description: Set this to a space separated list of test projects to run before publishing.
- name: DOTNET_CONFIGURATION
  displayName: Configuration
  description: Set this to configuration (Release/Debug).
  value: Release
- name: DOTNET_RESTORE_SOURCES
  displayName: NuGet package sources
  description: Set this to override the NuGet.config sources. Cannot be combined with
    DOTNET_RESTORE_CONFIGFILE.
- name: DOTNET_RESTORE_CONFIGFILE
  displayName: NuGet.Config file
  description: Set this to a Nuget.Config file. Cannot be combined with DOTNET_RESTORE_SOURCES.
objects: 
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: "${NAME}"
      annotations:
        description: Keeps track of changes in the application runtime image
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: "${NAME}-build"
      annotations:
        description: Keeps track of changes in the application builder image
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: "${NAME}-build"
      annotations:
        description: Defines how to build the application
    spec:
      source:
        type: Git
        git:
          uri: "${SOURCE_REPOSITORY_URL}"
          ref: "${SOURCE_REPOSITORY_REF}"
        contextDir: "${CONTEXT_DIR}"
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: ImageStreamTag
            namespace: "${NAMESPACE}"
            name: "${DOTNET_BUILD_IMAGE_STREAM_TAG}"
          env:
            - name: DOTNET_STARTUP_PROJECT
              value: "${DOTNET_STARTUP_PROJECT}"
            - name: DOTNET_ASSEMBLY_NAME
              value: "${DOTNET_ASSEMBLY_NAME}"
            - name: DOTNET_NPM_TOOLS
              value: "${DOTNET_NPM_TOOLS}"
            - name: DOTNET_TEST_PROJECTS
              value: "${DOTNET_TEST_PROJECTS}"
            - name: DOTNET_CONFIGURATION
              value: "${DOTNET_CONFIGURATION}"
            - name: DOTNET_RESTORE_SOURCES
              value: "${DOTNET_RESTORE_SOURCES}"
            - name: DOTNET_PACK
              value: "true"
            - name: DOTNET_TOOLS
              value: "${DOTNET_TOOLS}"
            - name: DOTNET_INCREMENTAL
              value: "true"
      output:
        to:
          kind: ImageStreamTag
          name: "${NAME}-build:latest"
      triggers:
        - type: ImageChange
        - type: ConfigChange
        - type: GitHub
          github:
            secret: "${GITHUB_WEBHOOK_SECRET}"
        - type: Generic
          generic:
            secret: "${GENERIC_WEBHOOK_SECRET}"
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: "${NAME}-runtime"
      annotations:
        description: Defines how to chain the runtime image from the source build image
    spec:
      source:
        dockerfile: |-
          FROM ${DOTNET_RUNTIME_IMAGE_STREAM_TAG}
          ADD app.tar.gz .
        images:
          - from:
              kind: ImageStreamTag
              name: "${NAME}-build:latest"
            paths:
              - sourcePath: "/opt/app-root/app.tar.gz"
                destinationDir: "."
      strategy:
        type: Docker
        dockerStrategy:
          from:
            kind: ImageStreamTag
            namespace: "${NAMESPACE}"
            name: "${DOTNET_RUNTIME_IMAGE_STREAM_TAG}"
      output:
        to:
          kind: ImageStreamTag
          name: "${NAME}:latest"
      triggers:
        - type: ImageChange
        - type: ConfigChange
        - type: ImageChange
          imageChange:
            from:
              kind: ImageStreamTag
              name: "${NAME}-build:latest"
