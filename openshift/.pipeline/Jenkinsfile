#!/usr/bin/env groovy

//ENV Vars
def TOOLS_NAMESPACE = "frjeow-tools"
def DEV_NAMESPACE = "frjeow-dev"
def TEST_NAMESPACE = "frjeow-test"
def PROD_NAMESPACE = "frjeow-prod"

def RABBITMQ_SERVICE = "rabbitmq"

def DOMAIN = "pathfinder.gov.bc.ca"
def SUBDOMAIN = "fams3"

//Pipeline
node {

 stage('Checkout') {
  dir('simple_pipeline') {
   checkout scm
  }
 }

 stage('Build App') {
  dir('simple_pipeline') {
   stage('Build in Tools Namespace') {
    dir('simple_pipeline') {
     checkout scm
     timeout(time: 600, unit: 'SECONDS') {
      openshift.withCluster() {
       openshift.withProject("${TOOLS_NAMESPACE}") {
        def searchapiSelector = openshift.selector("bc", "searchapi")
        try {
         searchapiSelector.object()
         builds = searchapiSelector.related("builds")
        } catch (Throwable t) {
         nb = openshift.newBuild("https://github.com/SierraSystems/FAMS3-POC/#add-cicd", "--context-dir=app", "--name=searchapi")

         // Print out information about the objects created by newBuild
         echo "newBuild created: ${nb.count()} objects : ${nb.names()}"

         // Filter non-BuildConfig objects and create selector which will find builds related to the BuildConfig
         builds = nb.narrow("bc").related("builds")
        }
        openshift.selector("bc", "searchapi").startBuild("--wait")
        builds.watch {
         // 'it' is bound to the builds selector.
         // Continue to watch until at least one build is detected
         if (it.count() == 0) {
          return false
         }
         // Print out the build's name and terminate the watch
         echo "Detected new builds created by buildconfig: ${it.names()}"
         return true
        }

        echo "Waiting for builds to complete..."

        // Like a watch, but only terminate when at least one selected object meets condition
        builds.untilEach {
         return it.object().status.phase == "Complete"
        }
       }
      }
     }

    }
   }
  }

 }