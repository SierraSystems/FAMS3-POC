#!/usr/bin/env groovy

//ENV Vars
def TOOLS_NAMESPACE = "frjeow-tools"
def DEV_NAMESPACE = "frjeow-dev"
def TEST_NAMESPACE = "frjeow-test"
def PROD_NAMESPACE = "frjeow-prod"

def RABBITMQ_SERVICE = "rabbitmq"
def SEARCH_API = "searchapi"

def DOMAIN = "pathfinder.gov.bc.ca"
def SUBDOMAIN = "fams3"

def GIT_URI = "https://github.com/SierraSystems/FAMS3-POC.git"
def GIT_REF = "feature/add-cicd"

//Pipeline
node {

 stage('Checkout') {
  dir('simple_pipeline') {
   checkout scm
  }
 }

 stage('Build SearchAPI') {
  dir('simple_pipeline') {
   sh "ls -lha openshift/templates"

   sh "oc process -f openshift/templates/searchapi.bc.yaml \
        -p NAME=${SEARCH_API} \
        -p SOURCE_REPOSITORY_URL=${GIT_URI} \
        -p SOURCE_REPOSITORY_REF=${GIT_REF} \
        -p DOTNET_STARTUP_PROJECT=app/SearchAPI/SearchAPI.csproj \
        -p NAMESPACE=${TOOLS_NAMESPACE} | oc apply -f - -n ${TOOLS_NAMESPACE}"

   sh "echo Wait for the build to finish"
   timeout(time: 180, unit: 'SECONDS') {
    openshift.withCluster() {
     openshift.withProject("${DEV_NAMESPACE}") {
      def searchapiSelector = openshift.selector("bc", "searchapi")
      searchapiSelector.object()
      builds = searchapiSelector.related("builds")
      builds.watch {
       // 'it' is bound to the builds selector.
       // Continue to watch until at least one build is detected
       if (it.count() == 0) {
        return false
       }
       // Print out the build's name and terminate the watch
       return true
      }
      builds.untilEach {
       return it.object().status.phase == "Complete"
      }
     }
    }
   }
  }
 }

}